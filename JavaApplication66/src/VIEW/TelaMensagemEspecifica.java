/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package VIEW;

import DAO.Servidor;
import MODEL.Cliente;
import MODEL.Mensagem;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author 0068952
 */
public class TelaMensagemEspecifica extends javax.swing.JPanel implements PainelSwingWorker{

    /**
     * Creates new form TelaMensagemEspecifica
     */
    private String Nome;
    private int controle;
    private SwingWorker atualizadorPontosE;

    public TelaMensagemEspecifica(String nome) {
        initComponents();
        minhasconfiguracoes();
        this.Nome = nome;

    }
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        try {
            BufferedImage imagem = ImageIO.read(getClass().getResource("/RESOUCE/telamensagemespecifica.PNG"));//por o nome da tela que vai estar em resouce

            g.drawImage(imagem, 0, 0, this);

        } catch (IOException ex) {
            System.err.println("arquivo não existe no resource");
        }
    }

    private DefaultListModel<Mensagem> dadosListaModel1;
    private DefaultListModel<String> dadosListaModel2;

    private ServerSocket soquete_servidor;
    private ArrayList<Mensagem> mensagens;
    private ArrayList<String> listaantiga;

    private ObjectOutputStream saida;
    private ObjectInputStream entrada;

    private ArrayList<Mensagem> listachatglobal;

    private static ArrayList<Mensagem> clientesConectados = new ArrayList<>();
    private static ArrayList<String> mensagemglobal = new ArrayList<>();
    private static Cliente cliente = null;

    public void enviar_mensagem(Object mensagem) throws Exception {
        this.saida.writeObject(mensagem);

    }

    public Object receber_mensagem() throws Exception {
        return this.entrada.readObject();

    }

    public void minhasconfiguracoes() {
        dadosListaModel1 = new DefaultListModel<>();

        this.jList1.setModel(this.dadosListaModel1);

        dadosListaModel2 = new DefaultListModel<>();

        

    }
    
    
    
    public void telabk() {

        atualizadorPontosE = new SwingWorker() {

            @Override
            protected Object doInBackground() throws Exception {

                while (true) {

                    cliente = new Cliente(Servidor.RetornaIp(), 15500);

                    Mensagem m = new Mensagem();
                    m.setNome(Nome);
                    m.setDest(jTextField4.getText());
                    m.setCodigo(-10);

                    TelaMensagemEspecifica.cliente.enviar_mensagem(m);

                    clientesConectadosT = (ArrayList<Mensagem>) cliente.receber_mensagem();

                    dadosListaModel1 = new DefaultListModel<>();

                    jList1.setModel(dadosListaModel1);

                    dadosListaModel1.addAll(clientesConectadosT);

                    Thread.sleep(1000);

                }

            }

        };

        atualizadorPontosE.execute();

    }
    
    private ArrayList<Mensagem> clientesConectadosT = new ArrayList<>();

    private ArrayList<String> clientesConectadosI = new ArrayList<>();

    private ArrayList<String> clientesConectadosTI = new ArrayList<>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jTextField4 = new javax.swing.JTextField();

        jTextField3.setText("jTextField3");

        setPreferredSize(new java.awt.Dimension(700, 400));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("Enviar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(73, 307, -1, -1));
        add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 120, 147, -1));
        add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 170, 147, -1));

        jButton2.setText("Voltar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 307, -1, -1));

        jScrollPane1.setViewportView(jList1);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(358, 132, 330, 260));
        add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(358, 107, 185, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        try {
            this.finalizaSW();
            controle = 1;
            Frame.trocaPainel("Tela Principal", new TelaP(Nome));
        } catch (Exception ex) {
            Logger.getLogger(TelaMensagemGlobal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (!jTextField1.getText().isBlank() && !jTextField2.getText().isBlank()) {
            try {
                cliente = new Cliente(Servidor.RetornaIp(), 15500);

                Mensagem m = new Mensagem();

                m.setCodigo(2);
                m.setDest(jTextField1.getText());

                m.setIP(InetAddress.getLocalHost().getHostAddress());

                m.setNome(Nome);
                m.setTexto(jTextField2.getText());

                cliente.enviar_mensagem(m);

            } catch (UnknownHostException ex) {
                Logger.getLogger(TelaMensagemGlobal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(TelaMensagemGlobal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
             JOptionPane.showMessageDialog(null, "Informe o desinatário e a mensagem para que a mesma seja enviada", "ERRO", JOptionPane.INFORMATION_MESSAGE);

        }

    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JList<Mensagem> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables

    @Override
    public void iniciaSW() {
        telabk();
    }

    @Override
    public void finalizaSW() {
         atualizadorPontosE.cancel(true);
    }
}
